//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Scripts/Jesper/InGame/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""RotatePlanet"",
            ""id"": ""773c897e-fc11-4b77-9885-af65ec80c2f8"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""2a6096e8-129d-4c75-af12-15d9cf00714d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotatePlayer2"",
                    ""type"": ""Value"",
                    ""id"": ""2c03dbbd-d25b-440c-85f2-368dd21e2a00"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c765a62e-2854-439f-b613-fbd43b1a2e1c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""76880ae8-f792-496d-a972-090136b98787"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Controller1"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bbee1ff4-2f45-46b6-b15b-3a14f0dc9685"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Controller1"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""d3494e24-74dd-420b-8d17-5639e7b8aa68"",
            ""actions"": [
                {
                    ""name"": ""MoveLeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""7e73e632-baa4-4ab5-b497-e09ee7e85ad3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e33debfd-6788-44f7-981b-dff0999f0bb8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeftRightPlayer2"",
                    ""type"": ""Value"",
                    ""id"": ""301323eb-7984-48d7-a45d-7a9022452a1f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpPlayer2"",
                    ""type"": ""Button"",
                    ""id"": ""f86a0e97-7299-443a-8d81-f63fba3e043c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0dbdaf5d-9aca-4a73-b56f-0f2067e50309"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd4f167b-bea1-4ab9-9a57-dc0a41107dbd"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Controller2"",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8657acd8-901f-448f-aaf6-ff3f1262c96f"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Controller2"",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ae47590d-a744-4d68-8406-9cb72a375cfe"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRightPlayer2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9a4f25ac-b108-4db7-9754-a248be442ccb"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRightPlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c3e52ac0-a06d-4124-94fe-de5ba61cf5a5"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRightPlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""22a2919f-f70d-40ac-85b0-664c1dfbe732"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Controller2"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b4a85dab-ce50-430c-bffc-5a8760540eca"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpPlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""6d6e4692-c55b-41a2-b83d-1b32628f5ab0"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""fca68d28-d868-40e2-a000-7d6e10b228ad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomPlayer2"",
                    ""type"": ""Button"",
                    ""id"": ""07bf6b4c-3b9d-48ac-81df-b35040e04d0e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eaf6958e-bb82-4a2d-a4cd-9dc6b8084cbf"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fbc2d2b-5d0c-48f0-8794-088e9016fcdc"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomPlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controller1"",
            ""bindingGroup"": ""Controller1"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller2"",
            ""bindingGroup"": ""Controller2"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // RotatePlanet
        m_RotatePlanet = asset.FindActionMap("RotatePlanet", throwIfNotFound: true);
        m_RotatePlanet_Rotate = m_RotatePlanet.FindAction("Rotate", throwIfNotFound: true);
        m_RotatePlanet_RotatePlayer2 = m_RotatePlanet.FindAction("RotatePlayer2", throwIfNotFound: true);
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_MoveLeftRight = m_PlayerMovement.FindAction("MoveLeftRight", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovement_MoveLeftRightPlayer2 = m_PlayerMovement.FindAction("MoveLeftRightPlayer2", throwIfNotFound: true);
        m_PlayerMovement_JumpPlayer2 = m_PlayerMovement.FindAction("JumpPlayer2", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        m_Camera_ZoomPlayer2 = m_Camera.FindAction("ZoomPlayer2", throwIfNotFound: true);
    }

    ~@GameInput()
    {
        UnityEngine.Debug.Assert(!m_RotatePlanet.enabled, "This will cause a leak and performance issues, GameInput.RotatePlanet.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerMovement.enabled, "This will cause a leak and performance issues, GameInput.PlayerMovement.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, GameInput.Camera.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RotatePlanet
    private readonly InputActionMap m_RotatePlanet;
    private List<IRotatePlanetActions> m_RotatePlanetActionsCallbackInterfaces = new List<IRotatePlanetActions>();
    private readonly InputAction m_RotatePlanet_Rotate;
    private readonly InputAction m_RotatePlanet_RotatePlayer2;
    public struct RotatePlanetActions
    {
        private @GameInput m_Wrapper;
        public RotatePlanetActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_RotatePlanet_Rotate;
        public InputAction @RotatePlayer2 => m_Wrapper.m_RotatePlanet_RotatePlayer2;
        public InputActionMap Get() { return m_Wrapper.m_RotatePlanet; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotatePlanetActions set) { return set.Get(); }
        public void AddCallbacks(IRotatePlanetActions instance)
        {
            if (instance == null || m_Wrapper.m_RotatePlanetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotatePlanetActionsCallbackInterfaces.Add(instance);
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @RotatePlayer2.started += instance.OnRotatePlayer2;
            @RotatePlayer2.performed += instance.OnRotatePlayer2;
            @RotatePlayer2.canceled += instance.OnRotatePlayer2;
        }

        private void UnregisterCallbacks(IRotatePlanetActions instance)
        {
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @RotatePlayer2.started -= instance.OnRotatePlayer2;
            @RotatePlayer2.performed -= instance.OnRotatePlayer2;
            @RotatePlayer2.canceled -= instance.OnRotatePlayer2;
        }

        public void RemoveCallbacks(IRotatePlanetActions instance)
        {
            if (m_Wrapper.m_RotatePlanetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotatePlanetActions instance)
        {
            foreach (var item in m_Wrapper.m_RotatePlanetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotatePlanetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotatePlanetActions @RotatePlanet => new RotatePlanetActions(this);

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_MoveLeftRight;
    private readonly InputAction m_PlayerMovement_Jump;
    private readonly InputAction m_PlayerMovement_MoveLeftRightPlayer2;
    private readonly InputAction m_PlayerMovement_JumpPlayer2;
    public struct PlayerMovementActions
    {
        private @GameInput m_Wrapper;
        public PlayerMovementActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeftRight => m_Wrapper.m_PlayerMovement_MoveLeftRight;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputAction @MoveLeftRightPlayer2 => m_Wrapper.m_PlayerMovement_MoveLeftRightPlayer2;
        public InputAction @JumpPlayer2 => m_Wrapper.m_PlayerMovement_JumpPlayer2;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @MoveLeftRight.started += instance.OnMoveLeftRight;
            @MoveLeftRight.performed += instance.OnMoveLeftRight;
            @MoveLeftRight.canceled += instance.OnMoveLeftRight;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @MoveLeftRightPlayer2.started += instance.OnMoveLeftRightPlayer2;
            @MoveLeftRightPlayer2.performed += instance.OnMoveLeftRightPlayer2;
            @MoveLeftRightPlayer2.canceled += instance.OnMoveLeftRightPlayer2;
            @JumpPlayer2.started += instance.OnJumpPlayer2;
            @JumpPlayer2.performed += instance.OnJumpPlayer2;
            @JumpPlayer2.canceled += instance.OnJumpPlayer2;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @MoveLeftRight.started -= instance.OnMoveLeftRight;
            @MoveLeftRight.performed -= instance.OnMoveLeftRight;
            @MoveLeftRight.canceled -= instance.OnMoveLeftRight;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @MoveLeftRightPlayer2.started -= instance.OnMoveLeftRightPlayer2;
            @MoveLeftRightPlayer2.performed -= instance.OnMoveLeftRightPlayer2;
            @MoveLeftRightPlayer2.canceled -= instance.OnMoveLeftRightPlayer2;
            @JumpPlayer2.started -= instance.OnJumpPlayer2;
            @JumpPlayer2.performed -= instance.OnJumpPlayer2;
            @JumpPlayer2.canceled -= instance.OnJumpPlayer2;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Zoom;
    private readonly InputAction m_Camera_ZoomPlayer2;
    public struct CameraActions
    {
        private @GameInput m_Wrapper;
        public CameraActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputAction @ZoomPlayer2 => m_Wrapper.m_Camera_ZoomPlayer2;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @ZoomPlayer2.started += instance.OnZoomPlayer2;
            @ZoomPlayer2.performed += instance.OnZoomPlayer2;
            @ZoomPlayer2.canceled += instance.OnZoomPlayer2;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @ZoomPlayer2.started -= instance.OnZoomPlayer2;
            @ZoomPlayer2.performed -= instance.OnZoomPlayer2;
            @ZoomPlayer2.canceled -= instance.OnZoomPlayer2;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    private int m_Controller1SchemeIndex = -1;
    public InputControlScheme Controller1Scheme
    {
        get
        {
            if (m_Controller1SchemeIndex == -1) m_Controller1SchemeIndex = asset.FindControlSchemeIndex("Controller1");
            return asset.controlSchemes[m_Controller1SchemeIndex];
        }
    }
    private int m_Controller2SchemeIndex = -1;
    public InputControlScheme Controller2Scheme
    {
        get
        {
            if (m_Controller2SchemeIndex == -1) m_Controller2SchemeIndex = asset.FindControlSchemeIndex("Controller2");
            return asset.controlSchemes[m_Controller2SchemeIndex];
        }
    }
    public interface IRotatePlanetActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnRotatePlayer2(InputAction.CallbackContext context);
    }
    public interface IPlayerMovementActions
    {
        void OnMoveLeftRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMoveLeftRightPlayer2(InputAction.CallbackContext context);
        void OnJumpPlayer2(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnZoomPlayer2(InputAction.CallbackContext context);
    }
}
