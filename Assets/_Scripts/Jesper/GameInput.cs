//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""RotatePlanetPlayer"",
            ""id"": ""773c897e-fc11-4b77-9885-af65ec80c2f8"",
            ""actions"": [
                {
                    ""name"": ""RotatePlanet"",
                    ""type"": ""Value"",
                    ""id"": ""2a6096e8-129d-4c75-af12-15d9cf00714d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c765a62e-2854-439f-b613-fbd43b1a2e1c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePlanet"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""76880ae8-f792-496d-a972-090136b98787"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePlanet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bbee1ff4-2f45-46b6-b15b-3a14f0dc9685"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotatePlanet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""d3494e24-74dd-420b-8d17-5639e7b8aa68"",
            ""actions"": [
                {
                    ""name"": ""MoveLeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""7e73e632-baa4-4ab5-b497-e09ee7e85ad3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0dbdaf5d-9aca-4a73-b56f-0f2067e50309"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dd4f167b-bea1-4ab9-9a57-dc0a41107dbd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8657acd8-901f-448f-aaf6-ff3f1262c96f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controls1"",
            ""bindingGroup"": ""Controls1"",
            ""devices"": []
        }
    ]
}");
        // RotatePlanetPlayer
        m_RotatePlanetPlayer = asset.FindActionMap("RotatePlanetPlayer", throwIfNotFound: true);
        m_RotatePlanetPlayer_RotatePlanet = m_RotatePlanetPlayer.FindAction("RotatePlanet", throwIfNotFound: true);
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_MoveLeftRight = m_PlayerMovement.FindAction("MoveLeftRight", throwIfNotFound: true);
    }

    ~@GameInput()
    {
        UnityEngine.Debug.Assert(!m_RotatePlanetPlayer.enabled, "This will cause a leak and performance issues, GameInput.RotatePlanetPlayer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PlayerMovement.enabled, "This will cause a leak and performance issues, GameInput.PlayerMovement.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RotatePlanetPlayer
    private readonly InputActionMap m_RotatePlanetPlayer;
    private List<IRotatePlanetPlayerActions> m_RotatePlanetPlayerActionsCallbackInterfaces = new List<IRotatePlanetPlayerActions>();
    private readonly InputAction m_RotatePlanetPlayer_RotatePlanet;
    public struct RotatePlanetPlayerActions
    {
        private @GameInput m_Wrapper;
        public RotatePlanetPlayerActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotatePlanet => m_Wrapper.m_RotatePlanetPlayer_RotatePlanet;
        public InputActionMap Get() { return m_Wrapper.m_RotatePlanetPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotatePlanetPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IRotatePlanetPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_RotatePlanetPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotatePlanetPlayerActionsCallbackInterfaces.Add(instance);
            @RotatePlanet.started += instance.OnRotatePlanet;
            @RotatePlanet.performed += instance.OnRotatePlanet;
            @RotatePlanet.canceled += instance.OnRotatePlanet;
        }

        private void UnregisterCallbacks(IRotatePlanetPlayerActions instance)
        {
            @RotatePlanet.started -= instance.OnRotatePlanet;
            @RotatePlanet.performed -= instance.OnRotatePlanet;
            @RotatePlanet.canceled -= instance.OnRotatePlanet;
        }

        public void RemoveCallbacks(IRotatePlanetPlayerActions instance)
        {
            if (m_Wrapper.m_RotatePlanetPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotatePlanetPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_RotatePlanetPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotatePlanetPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotatePlanetPlayerActions @RotatePlanetPlayer => new RotatePlanetPlayerActions(this);

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_MoveLeftRight;
    public struct PlayerMovementActions
    {
        private @GameInput m_Wrapper;
        public PlayerMovementActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeftRight => m_Wrapper.m_PlayerMovement_MoveLeftRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @MoveLeftRight.started += instance.OnMoveLeftRight;
            @MoveLeftRight.performed += instance.OnMoveLeftRight;
            @MoveLeftRight.canceled += instance.OnMoveLeftRight;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @MoveLeftRight.started -= instance.OnMoveLeftRight;
            @MoveLeftRight.performed -= instance.OnMoveLeftRight;
            @MoveLeftRight.canceled -= instance.OnMoveLeftRight;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    private int m_Controls1SchemeIndex = -1;
    public InputControlScheme Controls1Scheme
    {
        get
        {
            if (m_Controls1SchemeIndex == -1) m_Controls1SchemeIndex = asset.FindControlSchemeIndex("Controls1");
            return asset.controlSchemes[m_Controls1SchemeIndex];
        }
    }
    public interface IRotatePlanetPlayerActions
    {
        void OnRotatePlanet(InputAction.CallbackContext context);
    }
    public interface IPlayerMovementActions
    {
        void OnMoveLeftRight(InputAction.CallbackContext context);
    }
}
